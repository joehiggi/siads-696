# Importing data
neighbor_groups, df_anchor_neighor, df_log_return_pca = load_data()

# Compiling scores
final = []

for i, j in zip(df_anchor_neighor["anchor"], df_anchor_neighor["neighbor"]):
    # Running LR for each anchor neighbor pair
    # Initializing dictionary to hold scores
    scores = {}

    # Preparing data for train test split
    df_1 = df_log_return_pca[[i, j]]
    df_1 = df_1.drop(columns=[i])
    df_1 = create_lag(j, df_1)

    # Time-based train-test split
    df_1["target"] = df_1[j].shift(-1)
    df_1.dropna(inplace=True)

    for option in ["Training_with_Anchor", "Training_without_Anchor"]:

        # Define features (X) and target (y)
        if option == "Training_without_Anchor":
            features = [col for col in df_1.columns]
            i = None
        else:
            features = [
                col
                for col in df_1.columns
                if col == j or col.startswith("MA_") or col.startswith("return_lag_")
            ]

        X = df_1[features]
        y = df_1["target"]

        # Splitting data into train and test sets
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )
        clf_lr = LinearRegression().fit(X, y)
        y_preds = clf_lr.predict(X_test)

        # Assigning scores
        scores["anchor"] = i
        scores["neighbor"] = j
        scores["option"] = option
        # scores['rmse'] = root_mean_squared_error(y_test, y_preds)
        scores["rmse"] = np.mean(
            np.sqrt(
                np.abs(
                    cross_val_score(
                        clf_lr, X, y, scoring="neg_mean_squared_error", cv=5, n_jobs=-1
                    )
                )
            )
        )
        scores["model"] = "Linear Regression"
        scores["params"] = None
        scores["columns"] = df_1.columns

        # print(scores)
        final.append(scores)

df_final = pd.DataFrame(final)
df_final_summary_mean = df_final.groupby("option")["rmse"].mean()
df_final_summary_std = df_final.groupby("option")["rmse"].std()

print(df_final)
print(df_final_summary_mean)
print(df_final_summary_std)

# print(rf"Difference without anchor: {df_final_summary_mean[0] - df_final_summary_mean[1]}")